# -*- coding: utf-8 -*-
"""TP01/alg.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c103f3e04ynMehSzrA0HnCqrPKL5rm9E
"""

# chouiref youcef
import time
import random
import tracemalloc
import matplotlib.pyplot as plt

# إعداد مصفوفة مرتبة من 1000 عنصر
array = list(range(1, 1001))

# إعداد عدد الاختبارات
num_tests = 30

# تخزين النتائج
results = {
    "Simple Sequential Search": {"comparisons": [], "time": [], "memory": []},
    "Optimized Sequential Search": {"comparisons": [], "time": [], "memory": []},
    "Iterative Binary Search": {"comparisons": [], "time": [], "memory": []},
    "Recursive Binary Search": {"comparisons": [], "time": [], "memory": []}
}

# دوال البحث

# 1. Simple Sequential Search
def simple_sequential_search(arr, target):
    comparisons = 0
    for i in range(len(arr)):
        comparisons += 1
        if arr[i] == target:
            return i, comparisons
    return -1, comparisons

# 2. Optimized Sequential Search
def optimized_sequential_search(arr, target):
    comparisons = 0
    for i in range(len(arr)):
        comparisons += 1
        if arr[i] == target:
            return i, comparisons
        elif arr[i] > target:
            return -1, comparisons
    return -1, comparisons

# 3. Iterative Binary Search
def iterative_binary_search(arr, target):
    left, right = 0, len(arr) - 1
    comparisons = 0
    while left <= right:
        comparisons += 1
        mid = left + (right - left) // 2
        if arr[mid] == target:
            return mid, comparisons
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return -1, comparisons

# 4. Recursive Binary Search
def recursive_binary_search(arr, left, right, target, comparisons=0):
    if left <= right:
        comparisons += 1
        mid = left + (right - left) // 2
        if arr[mid] == target:
            return mid, comparisons
        elif arr[mid] < target:
            return recursive_binary_search(arr, mid + 1, right, target, comparisons)
        else:
            return recursive_binary_search(arr, left, mid - 1, target, comparisons)
    return -1, comparisons

# قياس استهلاك الذاكرة ووقت التنفيذ
def measure_performance(search_function, arr, target, *args):
    # قياس استهلاك الذاكرة
    tracemalloc.start()
    start_time = time.time()

    # استدعاء دالة البحث
    if args:
        index, comparisons = search_function(arr, *args, target)
    else:
        index, comparisons = search_function(arr, target)

    # قياس استهلاك الذاكرة والوقت
    current, peak = tracemalloc.get_traced_memory()
    end_time = time.time()

    tracemalloc.stop()

    return comparisons, (end_time - start_time), peak

# تشغيل الاختبارات
for _ in range(num_tests):
    # اختيار قيمة عشوائية للبحث
    search_value = random.randint(1, 1000)

    # Simple Sequential Search
    comparisons, exec_time, memory_used = measure_performance(simple_sequential_search, array, search_value)
    results["Simple Sequential Search"]["comparisons"].append(comparisons)
    results["Simple Sequential Search"]["time"].append(exec_time)
    results["Simple Sequential Search"]["memory"].append(memory_used)

    # Optimized Sequential Search
    comparisons, exec_time, memory_used = measure_performance(optimized_sequential_search, array, search_value)
    results["Optimized Sequential Search"]["comparisons"].append(comparisons)
    results["Optimized Sequential Search"]["time"].append(exec_time)
    results["Optimized Sequential Search"]["memory"].append(memory_used)

    # Iterative Binary Search
    comparisons, exec_time, memory_used = measure_performance(iterative_binary_search, array, search_value)
    results["Iterative Binary Search"]["comparisons"].append(comparisons)
    results["Iterative Binary Search"]["time"].append(exec_time)
    results["Iterative Binary Search"]["memory"].append(memory_used)

    # Recursive Binary Search
    comparisons, exec_time, memory_used = measure_performance(recursive_binary_search, array, search_value, 0, len(array)-1)
    results["Recursive Binary Search"]["comparisons"].append(comparisons)
    results["Recursive Binary Search"]["time"].append(exec_time)
    results["Recursive Binary Search"]["memory"].append(memory_used)

# حساب المتوسطات
averages = {algorithm: {metric: sum(values)/num_tests for metric, values in metrics.items()}
            for algorithm, metrics in results.items()}

# عرض النتائج
for algorithm, metrics in averages.items():
    print(f"{algorithm}:")
    print(f"  Average Comparisons: {metrics['comparisons']}")
    print(f"  Average Execution Time (seconds): {metrics['time']}")
    print(f"  Average Memory Usage (bytes): {metrics['memory']}")
    print()

# رسم النتائج
fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(18, 5))

# رسم عدد المقارنات
ax1.bar(averages.keys(), [averages[alg]["comparisons"] for alg in averages], color='skyblue')
ax1.set_title('Average Number of Comparisons')
ax1.set_ylabel('Comparisons')

# رسم وقت التنفيذ
ax2.bar(averages.keys(), [averages[alg]["time"] for alg in averages], color='lightgreen')
ax2.set_title('Average Execution Time (seconds)')
ax2.set_ylabel('Time (s)')

# رسم استهلاك الذاكرة
ax3.bar(averages.keys(), [averages[alg]["memory"] for alg in averages], color='salmon')
ax3.set_title('Average Memory Usage (bytes)')
ax3.set_ylabel('Memory (bytes)')

plt.tight_layout()
plt.show()